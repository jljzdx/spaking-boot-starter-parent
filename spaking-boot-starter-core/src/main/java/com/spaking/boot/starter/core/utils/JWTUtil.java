package com.spaking.boot.starter.core.utils;

import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.DecodedJWT;
import org.springframework.util.StringUtils;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class JWTUtil {

    // private static Logger logger = LoggerFactory.getLogger(JWTUtil.class);

    /**
     * token default secret key. do not reveal and modify it at will.
     */
    public static final String SECRET_KEY = "weib.wang.MicroBin5689";

    /**
     * token default expire days: 7 days, 604800 second totally.
     */
    public static final int calendarField = Calendar.SECOND;
    public static final int calendarInterval = 60 * 60 * 24 * 30; // 60s * 60m * 24h * 30day

    /**
     * generate token by JWT.<br/>
     * JWT constitute: header, payload, signature.
     * @param userId String
     * @param secretKey String
     * @param expirySecond int
     * @return
     */
    public static String genToken(String userId, String secretKey, int expirySecond) {

        // input parameters validation.
        if (StringUtils.isEmpty(userId) || StringUtils.isEmpty(secretKey) || expirySecond == 0)
            return null;

        // token issue date. use current date get from system.
        Date issueDate = new Date();

        // token expire date. add by set.
        Calendar expireDate = Calendar.getInstance();
        expireDate.add(calendarField, expirySecond);
        Date expiresDate = expireDate.getTime();

        // header Map
        Map<String, Object> headerMap = new HashMap<>();
        headerMap.put("alg", "HS256");
        headerMap.put("typ", "JWT");

        // build token
        String token = JWT.create() // header
                .withHeader(headerMap) // payload
                .withClaim("userId", userId) // payload
                .withIssuedAt(issueDate) // payload
                .withExpiresAt(expiresDate) // payload
                .sign(Algorithm.HMAC256(secretKey)); // signature

        return token;
    }

    /**
     * Generate token by JWT.<br/>
     * JWT constitute: header, payload, signature.<br/>
     * Token default expire days: 7 days, 604800 second totally.
     * @param userId String
     * @param secret String
     * @return
     */
    public static String genToken(String userId, String secret) {
        return genToken(userId, secret, calendarInterval);
    }

    /**
     * Generate token by JWT.<br/>
     * JWT constitute: header, payload, signature.<br/>
     * Generate token by using default secret key.
     * @param userId String
     * @param expirySecond int
     * @return String
     */
    public static String genToken(String userId, int expirySecond) {
        return genToken(userId, SECRET_KEY, expirySecond);
    }

    /**
     * Generate token by JWT.<br/>
     * JWT constitute: header, payload, signature.<br/>
     * Token default expire days: 7 days, 604800 second totally.<br/>
     * Generate token by using default secret key.
     * @param userId String
     * @return String
     */
    public static String genToken(String userId) {
        return genToken(userId, SECRET_KEY, calendarInterval);
    }

    /**
     * verify token by default secret key. return decoded token if key is valid.
     *
     * @param token String
     * @return DecodedJWT
     */
    public static DecodedJWT decodeToken(String token) {
        return decodeToken(token, SECRET_KEY);
    }

    /**
     * verify token by provided secret key. return decoded token if key is valid.
     * @param token String
     * @param secretKey String
     * @return DecodedJWT
     */
    public static DecodedJWT decodeToken(String token, String secretKey) {
        DecodedJWT jwt;
        try {
            JWTVerifier verifier = JWT.require(Algorithm.HMAC256(secretKey)).build();
            jwt = verifier.verify(token);
        } catch (JWTVerificationException ex) {
            throw ex;
        }
        return jwt;
    }

    /**
     * Get userId from token.
     * Note: this method can only be invoked when token is generated by using default secret key.
     *
     * @param token String
     * @return String
     */
    public static String getUserId(String token) {
        DecodedJWT jwt = decodeToken(token);
        String userId = jwt.getClaim("userId").asString();
        return userId;
    }

    /**
     *  Get userId from token.
     * Note: this method can only be invoked when token is generated by provided secret key.
     * @param token String
     * @param secretKey String
     * @return String
     */
    public static String getUserId(String token, String secretKey) {
        DecodedJWT jwt = decodeToken(token, secretKey);
        String userId = jwt.getClaim("userId").asString();
        return userId;
    }
//    public static void main(String[] args) {
//         String token = genToken("linshaobin", "2000", 60);
//         System.out.println(token);

//        String enToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MzM1NTIwNTAsInVzZXJJZCI6ImxpbnNoYW9iaW4iLCJpYXQiOjE1MzM1NTE5OTB9.Jo9n9vSR9iO1UwIVE7O-uaCN8kta7b_-57toKkmBZ4s";
//        String userId = getUserId(enToken, "1000");
//        System.out.println(userId);

        // String enToken =
        // "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MzIzMjAxOTcsInVzZXJJZCI6IjEwMDAwMDAwIiwiaWF0IjoxNTMyMzIwMTM3fQ.dkWW_DdpehdWBPUNYknKBMln4oAJQJ1hVg0qkMK2A90";
        // DecodedJWT jwt = decodeToken(enToken);

        // String userId = jwt.getClaim("userId").asString();
        // String alg = jwt.getAlgorithm();
        // String sign = jwt.getSignature();
        // String s = jwt.getExpiresAt().toString();

        // Map<String, Claim> claims = verifyToken(enToken);
        // Claim userId = claims.get("userId");
        // System.out.println(userId);
        // System.out.println(alg);
        // System.out.println(sign);
        // System.out.println(s);

//    }
}
